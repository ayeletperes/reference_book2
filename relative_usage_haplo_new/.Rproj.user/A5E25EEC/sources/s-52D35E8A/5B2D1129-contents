  
  
row_order <- labels(IdClusters(myDistMatrix = mat, 
                               collapse = -1, 
                               method = ifelse(input$method == "average", "UPGMA", input$method), 
                               cutoff = 0.25, 
                               verbose = F, 
                               showPlot = F, 
                               type = "dendrogram"))



range <- 1-input$range/100
range_seq <- seq(range[2], range[1], by = input$by/100)
hc <- IdClusters(myDistMatrix = mat, collapse = -1, 
                 method = ifelse(input$method == "average", "UPGMA", input$method), 
                 cutoff = rev(range_seq), verbose = F )

col_names <- paste0(input$method,".\n",(1-range_seq)*100, "%")

colnames(hc) <- col_names

hc_sub <- hc[row_order,]

order_col <- colnames(hc_sub)

imgt <- unique(getGene(row_order, strip_d = F, omit_nl = F))
imgt <- setNames(1:length(imgt), imgt)
hc_sub$IMGT <- imgt[getGene(row_order, strip_d = F, omit_nl = F)]

hc_sub <- hc_sub[,c("IMGT", order_col)]

hc_plot <- hc_sub
hc_plot$labels <- rownames(hc_plot)
hc_plot <- reshape2::melt(hc_plot)
hc_plot$labels <- factor(hc_plot$labels, levels = row_order)
hc_plot$gene <- factor(getGene(hc_plot$labels, strip_d = F, omit_nl = F), levels =  unique(getGene(row_order, strip_d = F, omit_nl = F)))
hc_plot$method <- sapply(strsplit(as.character(hc_plot$variable), "[.]"),"[[",1)
hc_plot$variable <- gsub(paste0(m,"[.]\n"),"",as.character(hc_plot$variable))
hc_plot$variable <- factor(hc_plot$variable, levels = c("IMGT", gsub(paste0(m,"[.]\n"),"",order_col)))
hc_plot$method <- factor(hc_plot$method, levels = c("IMGT", m))


p <- ggplot(hc_plot, aes(x = labels, y = variable, fill = factor(value))) +
  geom_tile(color = "white") + 
  #geom_text(aes(label=value), size = 2) +
  scale_fill_manual(values = col_vector) + 
  theme_minimal(base_size = 8) + 
  theme(legend.position = "none", 
        axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        strip.background = element_blank(), 
        strip.text = element_blank(), 
        axis.ticks.y = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.spacing.x = unit(1e-2, "lines"), 
        axis.text.x = element_text(angle = 90)) + 
  scale_x_discrete(position = "top") + 
  facet_grid(.~gene, scales = "free", drop = T, space = "free")






mat_list <- sapply(c("IGH","IGK","IGL"),function(chain){
  sapply(c("functional","nonfunctional"), function(functional){
    sapply(c("single","nonsingle"), function(single){
      sapply(c("rm","all"), function(rm_short){
        sapply(as.character(310:322), function(seq_end){    
        vgerm <- vgerms[[chain]]
        vgerm <-
          vgerm[!grepl(paste0(c("NL", "OR"), collapse = "|"), names(vgerm))]
        if (functional == "functional") {
          vgerm <- vgerm[functionality[[chain]]]
          vgerm <- vgerm[!is.na(vgerm)]
        }
        
        if (single=="single") {
          alleles <-
            data.frame(
              alleles = names(vgerm),
              genes = getGene(names(vgerm), strip_d = F, omit_nl = F),
              stringsAsFactors = F
            ) %>%
            dplyr::group_by(genes) %>% dplyr::filter(row_number() == 1) %>% dplyr::pull(alleles)
          vgerm <- vgerm[alleles]
        }
        
        vgerm <- gsub("[.]", "-", vgerm)
        tmp_first <- stringi::stri_locate(vgerm, regex = "[A-Z|a-z]")        
        if(rm_short=="short"){
          vgerm <- vgerm[-which(tmp_first[,1]!=1)]
        }else{
          for (i in 1:nrow(tmp_first)) {
            vgerm[[i]] <-
              paste0(gsub("[-]", "N", substr(vgerm[[i]], 1, tmp_first[i, 1] - 1)),
                     substr(vgerm[[i]], tmp_first[i, 1], nchar(vgerm[[i]])))
          }  
        }
        
        vgerm <-
          sapply(vgerm, function(x)
            ifelse(nchar(x) != max(nchar(vgerm)), paste0(x, paste0(
              rep("N", (max(nchar(
                vgerm
              )) - nchar(x))), collapse = ""
            )), x))
        
        ## cut to 3' end value
        vgerm <-
          sapply(vgerm, function(x)
            substr(x, 1, as.numeric(seq_end))
          )
        
        dna <- DNAStringSet(vgerm)
        
        mat <-
          DistanceMatrix(
            dna,
            includeTerminalGaps = FALSE,
            penalizeGapGapMatches = FALSE,
            penalizeGapLetterMatches = T,
            verbose = F
          )
        
        return(mat)}, simplify = F)
        }, simplify = F)}, simplify = F)}, simplify = F)}, simplify = F)


allele_groups <- function(tmp, genes, gr){
  new_alleles <- c()
  diag(tmp)=NA
  val <- tmp[rowSums(tmp==0,na.rm = T)!=0,colSums(tmp==0, na.rm = T)!=0]
  all_alleles <- rownames(tmp)
  gene <- getGene(all_alleles[1])
  similar <- which(val == 0, arr.ind = T)
  rm_a <- c()
  rm_s <- c()
  if(length(similar)!=0){
    similar[,1] <- rownames(val[similar[,1],])
    similar[,2] <- colnames(val[,as.numeric(similar[,2])])
    similar <- as.data.frame(similar, stringsAsFactors=F)
    similar$names <- sapply(1:nrow(similar), function(i) paste0(sort(similar[i,]), collapse = ","))
    idx_remove <- !duplicated(similar[,3])
    similar <- similar[idx_remove,1:2]
    for(ii in 1:nrow(similar)){
      a <- similar[ii,]
      a_n <- which(getGene(a,strip_d = F)!=gene)
      if(length(a_n)>1){
        rm_a <- c(rm_a,a[[2]])
        rm_s <- c(rm_s,a[[1]])
      }else{
        if(length(a_n)==1){
          rm_a <- c(rm_a,a[[a_n]])
          rm_s <- c(rm_s,a[[which(getGene(a,strip_d = F)==gene)]])
        }
      }
    }
    rm_a <- unique(rm_a)
    f_alleles <- all_alleles[which(!all_alleles %in% rm_a)]
  }else{
    f_alleles <- all_alleles
  }
  n <- length(f_alleles)
  for(x in 1:n){
    new <- paste0(gene,"G",gr,"*",ifelse(x<10,"0",""),x)
    new_alleles <- dplyr::bind_rows(data.frame(or_allele = f_alleles[x], new_allele = new, remove = F, stringsAsFactors = F), new_alleles)
  }
  if(length(rm_a)!=0) new_alleles <- dplyr::bind_rows(data.frame(or_allele = rm_a, new_allele = new_alleles$new_allele[new_alleles$or_allele %in% unique(rm_s)], remove = T, stringsAsFactors = F), new_alleles)
  
  return(new_alleles)
}




alleles_dbs <- sapply(c("IGH"), function(chain) {
  sapply(c("functional", "nonfunctional"), function(functional) {
    sapply(c("single", "nonsingle"), function(single) {
      sapply(c("rm", "all"), function(rm_short) {
        sapply(as.character(318:322), function(seq_end) {
          sapply(c("complete", "single", "average", "NJ"), function(method) {
            sapply(as.character(seq(93,97, by = 1)), function(thresh) {
              
              
              
              range_seq <- 1 - as.numeric(thresh) / 100
              print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              mat <- mat_list[[chain]][[functional]][[single]][[rm_short]][[seq_end]]
              if (method == "NJ") {
                row_order <- labels(
                  IdClusters(
                    myDistMatrix = mat,
                    collapse = -1,
                    method = method,
                    cutoff = 0.25,
                    verbose = F,
                    showPlot = F,
                    type = "dendrogram"
                  )
                )
                
                
                hc_sub <- IdClusters(
                  myDistMatrix = mat,
                  collapse = -1,
                  method = method,
                  cutoff = range_seq,
                  verbose = F
                )
                
              } else{
                hc_sub <- hclust(as.dist(mat), method)
                row_order <- labels(as.dendrogram(hc_sub, hang = -1))
                cut <- data.frame(cluster = cutree(as.dendrogram(hc_sub, hang = -1), h = range_seq))
                hc_sub <- cut
              }
              
              colnames(hc_sub) <- paste0((1-range_seq)*100, "%")
              
              imgt <- unique(getGene(rownames(hc_sub), strip_d = F, omit_nl = F))
              imgt <- setNames(1:length(imgt), imgt)
              hc_sub$IMGT <- imgt[getGene(rownames(hc_sub), strip_d = F, omit_nl = F)]
              
              hc_sub$labels <- factor(rownames(hc_sub), levels = row_order)
              hc_sub$labels_ind <- setNames(1:length(levels(hc_sub$labels)), levels(hc_sub$labels))[hc_sub$labels]
              hc_plot <- reshape2::melt(hc_sub, id.vars = c("labels", "labels_ind"))
              
              hc_plot$freq <- 1
              
              hc_plot$variable <- factor(hc_plot$variable, levels = c("IMGT", paste0((1-range_seq)*100, "%")))
              
              
              groups <-
                setNames(hc_plot$value[hc_plot$variable != "IMGT"], hc_plot$labels[hc_plot$variable !=
                                                                                           "IMGT"])
              
              
              alleles_db <- c()
              for (gr in unique(groups)) {
                genes <- names(groups)[groups == gr]
                if (length(unique(getGene(genes, strip_d = F, omit_nl = F))) == 1){
                  new <- sapply(genes, function(x) paste0(strsplit(x,"[*]")[[1]][1],"G",gr,"*",strsplit(x,"[*]")[[1]][2]))
                  alleles_db <- bind_rows(alleles_db, data.frame(or_allele = genes, new_allele = new, remove = F))
                  
                }else{
                  prox_mat <- mat[genes, genes]
                  
                  alleles <- allele_groups(prox_mat, genes, gr = gr)
                  alleles_db <- bind_rows(alleles_db, alleles)
                }
              }
              
              return(alleles_db)
              
              alleles_db_l <-
                setNames(alleles_db$new_allele, alleles_db$or_allele)

              groups_genes <- groups
              names(groups_genes) <-
                sapply(names(groups_genes), function(x)
                  if (x %in% names(alleles_db_l))
                    alleles_db_l[x]
                  else
                    x)

              tmp <-
                merge(
                  data.frame(
                    alleles = names(groups),
                    cluster = groups,
                    stringsAsFactors = F
                  ),
                  data.frame(
                    alleles_new = names(groups_genes),
                    cluster = groups,
                    stringsAsFactors = F
                  ),
                  by = "cluster"
                )
              tmp <-
                tmp %>% group_by(cluster) %>% dplyr::summarise(
                  gene = paste0(unique(
                    alakazam::getGene(alleles, strip_d = F)
                  ), collapse = "/"),
                  new_gene = paste0(unique(
                    alakazam::getGene(alleles_new, strip_d = F)
                  ), collapse = "/")
                )
              genes_groups <- setNames(tmp$new_gene, tmp$gene)
              
              
              
              # print("data")
              # 
              # data_ <- data
              # 
              # data_$v_call_new <- data_$v_call
              # data_$v_call_new <-
              #   stringi::stri_replace_all_fixed(
              #     str = data_$v_call_new,
              #     alleles_db$or_allele,
              #     alleles_db$new_allele,
              #     vectorize_all = F
              #   )
              # data_$v_call_new <-
              #   alakazam::getAllele(
              #     data_$v_call_new,
              #     collapse = T,
              #     first = F,
              #     strip_d = F,
              #     omit_nl = F
              #   )
              # data_$v_gene <-
              #   alakazam::getGene(
              #     data_$v_call_new,
              #     first = F,
              #     collapse = T,
              #     strip_d = F
              #   )
              # 
              # data_$v_allele <- sapply(data_$v_call_new, function(x) {
              #   x <- strsplit(x, ",")[[1]]
              #   a <- c()
              #   for (i in x) {
              #     a <- c(a, strsplit(i, "[*]")[[1]][2])
              #   }
              #   return(paste0(unique(a), collapse = ","))
              # })
              # 
              # print("frac")
              # 
              # genotypes <- data_ %>% group_by(v_gene) %>% filter(n()>100)  %>% filter(!is.na(v_allele)) %>% mutate(v_allele2 = v_allele) %>% 
              #   group_by(subject, v_gene) %>% dplyr::mutate(n_row = dplyr::n()) %>% 
              #   ungroup() %>% tidyr::separate_rows(v_allele, sep = ",") %>% 
              #   rowwise() %>% mutate(frac = ifelse(grepl(",",v_allele2),
              #                                      1/length(strsplit(v_allele2,",")[[1]]),1))
              # 
              # 
              # genotypes_fraction <- genotypes %>% ungroup() %>% dplyr::group_by(subject, v_gene, v_allele) %>% 
              #   dplyr::summarise(count = sum(frac), freq = sum(frac)/unique(n_row)) %>% ungroup() %>%  dplyr::arrange(subject, v_gene,desc(freq)) %>%
              #   dplyr::group_by(subject, v_gene) %>% dplyr::mutate(loc = 1:dplyr::n(), project = strsplit(subject,"_")[[1]][1])
              # 
              # print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              # 
              # return(genotypes_fraction)
            }, simplify = F)
          }, simplify = F)
        }, simplify = F)
      }, simplify = F)
    }, simplify = F)
  }, simplify = F)
}, simplify = F)


# tmp <- alleles_dbs$IGH$functional$nonsingle$all$`318`$complete$`95`
# tmp <- tmp[!grepl("_",tmp$or_allele),]
# tmp$gene <-getGene(tmp$or_allele, strip_d = F, omit_nl = F)
# for(allele in grep("_", dbs_fasta_db$allele, value = T)){
#   g <- getGene(allele, strip_d = F, omit_nl = F)
#   sub <- tmp[tmp$gene==g, ]
#   g_new <- strsplit(sub$new_allele[1],"[*]")[[1]][1]
#   i = as.numeric(strsplit(sort(sub$new_allele)[length(sub$new_allele)],"[*]")[[1]][2])
#   a = strsplit(allele, "[*]")[[1]][1]
#   if(i<10) i = paste0("0",as.character(i+1)) else i = as.character(i+1)
#   tmp <- rbind(tmp,data.frame(or_allele = allele, new_allele = paste0(g_new,"*",i), remove = F, gene = g))
#   
# }
# alleles_dbs$IGH$functional$nonsingle$all$`318`$complete$`95` <- tmp
save(alleles_dbs, file = "alleles_dbs.rda")

data$gap <- grepl("-",data$v_seq)
data <- data %>% filter(n_count == 0, !gap) %>% select(-sequence_id, -v_seq, -consensus_count, -duplicate_count, -n_count, -gap)

data_frac <- sapply(c("IGH"), function(chain) {
  sapply(c("functional"), function(functional) {
    sapply(c("nonsingle"), function(single) {
      sapply(c("rm", "all"), function(rm_short) {
        sapply(as.character(318), function(seq_end) {
          sapply(c("complete"), function(method) {
            sapply(as.character(seq(93,95, by = 1)), function(thresh) {
              
              alleles_db <- alleles_dbs[[chain]][[functional]][[single]][[rm_short]][[seq_end]][[method]][[thresh]]
              
              data_ <- data
              data_$v_call_new <- data_$v_call
              data_$v_call_new <-
                stringi::stri_replace_all_fixed(
                  str = data_$v_call_new, pattern = alleles_db$or_allele, replacement = alleles_db$new_allele, vectorize_all = F
                )
              print("1")
              data_$v_gene <- alakazam::getGene(data_$v_call_new, first = F, collapse = T, strip_d = F)
              print("2")
              data_ <- data_ %>% filter(!grepl(",",v_gene))
              print("3")
              r <- gsub("(IG[HKL][VDJADEGMC]|TR[ABDG])[A-Z0-9\\(\\)]+[-/\\w]*[*]", "", data_$v_call_new, perl = T)
              rn <- stringr::str_replace_all(r, "([0-9][0-9]+),\\1", "\\1")
              data_$v_allele <- rn
              #data_$sep_count <- stringi::stri_count(r, regex = ",")
              data_$element_count <- stringi::stri_count(r, regex = "([0-9]+)")
              print("4")
              genotypes <- data_ %>% group_by(v_gene)  %>% filter(!is.na(v_allele)) %>% 
                mutate(v_allele2 = v_allele) %>% ungroup() %>% 
                group_by(subject) %>% mutate(n_row_sub = n()) %>% ungroup() %>%
                group_by(subject, v_gene) %>% dplyr::mutate(n_row = dplyr::n()) %>%
                ungroup() %>% tidyr::separate_rows(v_allele, sep = ",") %>%
                rowwise() %>% mutate(frac = 1/element_count)
              genotypes_fraction <- genotypes %>% ungroup() %>% dplyr::group_by(subject, v_gene, v_allele) %>%
                dplyr::summarise(count = round(sum(frac),3), freq = round(sum(frac)/unique(n_row),4),
                                 freq2 = round(sum(frac)/unique(n_row_sub),4)) %>% ungroup() %>%  dplyr::arrange(subject, v_gene,desc(freq)) %>%
                dplyr::group_by(subject, v_gene) %>% dplyr::mutate(loc = 1:dplyr::n(), project = strsplit(subject,"_")[[1]][1])
              # 
              print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              # 
              return(genotypes_fraction)
            }, simplify = F)
          }, simplify = F)
        }, simplify = F)
      }, simplify = F)
    }, simplify = F)
  }, simplify = F)
}, simplify = F)




functional_groups <- sapply(c("IGH"), function(chain) {
  sapply(c("functional", "nonfunctional"), function(functional) {
    sapply(c("single", "nonsingle"), function(single) {
      sapply(c("rm", "all"), function(rm_short) {
        sapply(as.character(318:322), function(seq_end) {
          sapply(c("complete", "single", "average", "NJ"), function(method) {
            sapply(as.character(seq(93,97, by = 1)), function(thresh) {
              
              
              
              range_seq <- 1 - as.numeric(thresh) / 100
              print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              mat <- mat_list[[chain]][[functional]][[single]][[rm_short]][[seq_end]]
              if (method == "NJ") {
                row_order <- labels(
                  IdClusters(
                    myDistMatrix = mat,
                    collapse = -1,
                    method = method,
                    cutoff = 0.25,
                    verbose = F,
                    showPlot = F,
                    type = "dendrogram"
                  )
                )
                
                
                hc_sub <- IdClusters(
                  myDistMatrix = mat,
                  collapse = -1,
                  method = method,
                  cutoff = range_seq,
                  verbose = F
                )
                
              } else{
                hc_sub <- hclust(as.dist(mat), method)
                row_order <- labels(as.dendrogram(hc_sub, hang = -1))
                cut <- data.frame(cluster = cutree(as.dendrogram(hc_sub, hang = -1), h = range_seq))
                hc_sub <- cut
              }
              
              colnames(hc_sub) <- paste0((1-range_seq)*100, "%")
              
              imgt <- unique(getGene(rownames(hc_sub), strip_d = F, omit_nl = F))
              imgt <- setNames(1:length(imgt), imgt)
              hc_sub$IMGT <- imgt[getGene(rownames(hc_sub), strip_d = F, omit_nl = F)]
              
              hc_sub$labels <- factor(rownames(hc_sub), levels = row_order)
              hc_sub$labels_ind <- setNames(1:length(levels(hc_sub$labels)), levels(hc_sub$labels))[hc_sub$labels]
              hc_plot <- reshape2::melt(hc_sub, id.vars = c("labels", "labels_ind"))
              
              hc_plot$freq <- 1
              
              hc_plot$variable <- factor(hc_plot$variable, levels = c("IMGT", paste0((1-range_seq)*100, "%")))
              
              
              groups <-
                setNames(hc_plot$value[hc_plot$variable != "IMGT"], hc_plot$labels[hc_plot$variable !=
                                                                                     "IMGT"])
              
              alleles_db <- c()
              for (gr in unique(groups)) {
                genes <- names(groups)[groups == gr]
                if (length(unique(getGene(genes, strip_d = F, omit_nl = F))) == 1){
                  new <- sapply(genes, function(x) paste0(strsplit(x,"[*]")[[1]][1],"G",gr,"*",strsplit(x,"[*]")[[1]][2]))
                  alleles_db <- bind_rows(alleles_db, data.frame(or_allele = genes, new_allele = new, remove = F))
                  
                }else{
                  prox_mat <- mat[genes, genes]
                  
                  alleles <- allele_groups(prox_mat, genes, gr = gr)
                  alleles_db <- bind_rows(alleles_db, alleles)
                }
              }
              
             
              
              alleles_db_l <-
                setNames(alleles_db$new_allele, alleles_db$or_allele)
              
              groups_genes <- groups
              names(groups_genes) <-
                sapply(names(groups_genes), function(x)
                  if (x %in% names(alleles_db_l))
                    alleles_db_l[x]
                  else
                    x)
              
              tmp <-
                merge(
                  data.frame(
                    alleles = names(groups),
                    cluster = groups,
                    stringsAsFactors = F
                  ),
                  data.frame(
                    alleles_new = names(groups_genes),
                    cluster = groups,
                    stringsAsFactors = F
                  ),
                  by = "cluster"
                )
              tmp <-
                tmp %>% group_by(cluster) %>% dplyr::summarise(
                  gene = paste0(unique(
                    alakazam::getGene(alleles, strip_d = F)
                  ), collapse = "/"),
                  new_gene = paste0(unique(
                    alakazam::getGene(alleles_new, strip_d = F)
                  ), collapse = "/")
                )
              genes_groups <- setNames(tmp$new_gene, tmp$gene)
              
              return(genes_groups)
              
              # print("data")
              # 
              # data_ <- data
              # 
              # data_$v_call_new <- data_$v_call
              # data_$v_call_new <-
              #   stringi::stri_replace_all_fixed(
              #     str = data_$v_call_new,
              #     alleles_db$or_allele,
              #     alleles_db$new_allele,
              #     vectorize_all = F
              #   )
              # data_$v_call_new <-
              #   alakazam::getAllele(
              #     data_$v_call_new,
              #     collapse = T,
              #     first = F,
              #     strip_d = F,
              #     omit_nl = F
              #   )
              # data_$v_gene <-
              #   alakazam::getGene(
              #     data_$v_call_new,
              #     first = F,
              #     collapse = T,
              #     strip_d = F
              #   )
              # 
              # data_$v_allele <- sapply(data_$v_call_new, function(x) {
              #   x <- strsplit(x, ",")[[1]]
              #   a <- c()
              #   for (i in x) {
              #     a <- c(a, strsplit(i, "[*]")[[1]][2])
              #   }
              #   return(paste0(unique(a), collapse = ","))
              # })
              # 
              # print("frac")
              # 
              # genotypes <- data_ %>% group_by(v_gene) %>% filter(n()>100)  %>% filter(!is.na(v_allele)) %>% mutate(v_allele2 = v_allele) %>% 
              #   group_by(subject, v_gene) %>% dplyr::mutate(n_row = dplyr::n()) %>% 
              #   ungroup() %>% tidyr::separate_rows(v_allele, sep = ",") %>% 
              #   rowwise() %>% mutate(frac = ifelse(grepl(",",v_allele2),
              #                                      1/length(strsplit(v_allele2,",")[[1]]),1))
              # 
              # 
              # genotypes_fraction <- genotypes %>% ungroup() %>% dplyr::group_by(subject, v_gene, v_allele) %>% 
              #   dplyr::summarise(count = sum(frac), freq = sum(frac)/unique(n_row)) %>% ungroup() %>%  dplyr::arrange(subject, v_gene,desc(freq)) %>%
              #   dplyr::group_by(subject, v_gene) %>% dplyr::mutate(loc = 1:dplyr::n(), project = strsplit(subject,"_")[[1]][1])
              # 
              # print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              # 
              # return(genotypes_fraction)
            }, simplify = F)
          }, simplify = F)
        }, simplify = F)
      }, simplify = F)
    }, simplify = F)
  }, simplify = F)
}, simplify = F)

save(data_frac, file = "data_frac.rda")
save(alleles_dbs, file = "alleles_dbs.rda")
save(functional_groups, file = "functional_groups.rda")

quickdf <- function(data, alleles_db) {
  data_ <- data %>% filter(n_count == 0, !grepl("-",v_seq))
  
  data_$v_call_new <- data_$v_call
  data_$v_call_new <-
    stringi::stri_replace_all_fixed(
      str = data_$v_call_new, pattern = alleles_db$or_allele, replacement = alleles_db$new_allele, vectorize_all = F
    )
  data_$v_gene <-
    alakazam::getGene(
      data_$v_call_new,
      first = F,
      collapse = T,
      strip_d = F
    )
  
  data_$v_allele <- sapply(data_$v_call_new, function(x) {
    x <- strsplit(x, ",")[[1]]
    a <- c()
    for (i in x) {
      a <- c(a, strsplit(i, "[*]")[[1]][2])
    }
    return(paste0(unique(a), collapse = ","))
  })
  
  return(data_)
}

library(profvis)

get_allele <- function (segment_call, sep = ",") 
  {                 
  segment_regex <- "(IG[HKL][VDJADEGMC]|TR[ABDG])[A-Z0-9\\(\\)]+[-/\\w]*[*]"
  r <- gsub("(IG[HKL][VDJADEGMC]|TR[ABDG])[A-Z0-9\\(\\)]+[-/\\w]*[*]", "", segment_call, perl = T)
  r <- sapply(strsplit(r, sep), function(x) paste(order(unique(x)), collapse = sep))
  return(r)
}

data <- data %>% mutate(gap = grepl("-",v_seq))

profvis({
  data_ <- data %>% filter(n_count == 0, !gap)
  data_$v_call_new <- data_$v_call
  data_$v_call_new <-
    stringi::stri_replace_all_fixed(
      str = data_$v_call_new, pattern = alleles_db$or_allele, replacement = alleles_db$new_allele, vectorize_all = F
    )
  data_$v_gene <- alakazam::getGene(data_$v_call_new, first = F, collapse = T, strip_d = F)
  data_ <- data_ %>% filter(!grepl(",",v_gene))
  data_$v_allele <- get_allele(data_$v_call_new)
  
})





load("../dbs_filterd_n_and_gap_v_length_dt.rda")
load("../fileter_db_new_mut3.rda")
library(data.table)
data_frac <- sapply(c("IGH"), function(chain) {
  sapply(c("functional"), function(functional) {
    sapply(c("nonsingle"), function(single) {
      sapply(c("all"), function(rm_short) {
        sapply(as.character(318), function(seq_end) {
          sapply(c("complete"), function(method) {
            sapply(as.character(95), function(thresh) {
              data_ <- data.table(dbs_filtered_mut3)  #d_n_and_gap_v_length_dt
              data_[,v_call_new := stringi::stri_replace_all_regex(str = v_call, pattern = paste0(gsub("[*]","[*]",alleles_db$or_allele),"\\b"), replacement = alleles_db$new_allele, vectorize_all = F)]
              data_[, v_gene := alakazam::getGene(v_call_new, first = F, collapse = T, strip_d = F)]
              data_ <- data_[!grepl(",",v_gene)]
              data_[,v_allele := stringr::str_replace_all(gsub("(IG[HKL][VDJADEGMC]|TR[ABDG])[A-Z0-9\\(\\)]+[-/\\w]*[*]", "", v_call_new, perl = T), "([0-9][0-9]+),\\1", "\\1")]
              data_ <- data_[!(grepl(",",v_allele))]
              #data_[,element_count := stringi::stri_count(v_allele, regex = "([0-9][0-9]+)")]
              data_ <- data_[!is.na(v_allele)]
              data_[,v_allele2 := v_allele]
              
              tmp <- lapply(0:3, function(mut_val) {
              
              alleles_db <- alleles_dbs$IGH$functional$nonsingle$all$`318`$complete$`95`
              
              
              
              genotypes <- data_[mut <= mut_val]
              print(nrow(genotypes))
              genotypes[,n_row_sub := .N, by = subject]
              genotypes[,n_row := .N, by = list(subject,v_gene)]
              genotypes <- genotypes[, .(v_allele = unlist(tstrsplit(v_allele, ",", type.convert = FALSE))), by = setdiff(names(genotypes), "v_allele")]
              genotypes[,frac := 1/1]
              #print(paste(chain, functional, single, rm_short, seq_end, method, thresh))
              
              genotypes_fraction <- genotypes %>% ungroup() %>% dplyr::group_by(subject, v_gene, v_allele) %>%
                dplyr::summarise(count = round(sum(frac),3), freq = round(sum(frac)/unique(n_row),8),
                                 freq2 = round(sum(frac)/unique(n_row_sub),8)) %>% ungroup() %>%  dplyr::arrange(subject, v_gene,desc(freq)) %>%
                dplyr::group_by(subject, v_gene) %>% dplyr::mutate(loc = 1:dplyr::n(), project = strsplit(subject,"_")[[1]][1])
              
              hetro_samples <- genotypes %>% dplyr::filter(grepl("J6",j_call), !grepl(",",j_call)) %>% 
                dplyr::select(subject, j_call) %>% dplyr::group_by(subject) %>% dplyr::mutate(nrow = dplyr::n()) %>% dplyr::ungroup() %>% 
                dplyr::group_by(subject, j_call) %>% dplyr::summarise(frac = dplyr::n()/nrow) %>% dplyr::slice(1) %>%
                dplyr::group_by(subject) %>% dplyr::summarise(frac_J6 = frac[which(frac>=0.2 & frac<=0.8)], 
                                                       A = sum(frac>=0.2 & frac<=0.8)>=2, 
                                                       J_A = paste0(j_call[which(frac>=0.2 & frac<=0.8)]))  %>% 
                dplyr::filter(A)
              
              genotypes_fraction$J6 <- ifelse(genotypes_fraction$subject %in% hetro_samples$subject, 1, 2)
              
              genotypes_fraction$J6_TAG <- ""
              
              # style_str <- "white-space: nowrap; border: 1px solid white; background: steelblue; height: 15px;"
              
              for(sub in unique(hetro_samples$subject)){
                no_check <- "❌ " 
                check <- "✅"
                j02 <- paste0("</b>J6*02: ",ifelse(hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*02") %>% pull(frac_J6) %>% length(), check, no_check)) #hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*02") %>% pull(frac_J6), 0)*1000,"px")
                j03 <- paste0("</b>J6*03: ",ifelse(hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*03") %>% pull(frac_J6) %>% length(), check, no_check)) #hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*03") %>% pull(frac_J6), 0)*1000,"px")
                j04 <- paste0("</b>J6*04: ",ifelse(hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*04") %>% pull(frac_J6) %>% length(), check, no_check)) #hetro_samples %>% filter(subject==sub, J_A == "IGHJ6*04") %>% pull(frac_J6), 0)*1000,"px")
                
                              
                            
                # tag <- paste0(
                #     "<div>",
                #     "<div style='{style_str} width:" ,j02,"'>J6*02</div>",
                #     "<div style='{style_str} width:" ,j03,"'>J6*03</div>",
                #     "<div style='{style_str} width:" ,j04,"'>J6*04</div>",
                #     "</div>")
                
                genotypes_fraction$J6_TAG[genotypes_fraction$subject == sub] <- paste0(j02,j03,j04)#glue::glue(tag)
              }
              
                                
              
              
              genotypes_fraction_j6 <- genotypes %>% ungroup() %>% filter(subject %in% hetro_samples$subject) %>% 
                group_by(subject) %>%
                filter(j_call %in% hetro_samples$J_A[hetro_samples$subject %in% subject]) %>%
                filter(grepl("J6",j_call), !grepl(",",j_call)) %>% ungroup() %>%
                dplyr::group_by(subject, v_gene) %>%
                dplyr::mutate(n_row = n()) %>% ungroup() %>%
                dplyr::group_by(subject, v_gene, v_allele, j_call) %>%
                dplyr::summarise(count = round(sum(frac),3), freq = round(sum(frac)/unique(n_row),8),
                                 freq2 = round(sum(frac)/unique(n_row_sub),8)) %>% ungroup() %>%  
                dplyr::arrange(subject, v_gene,desc(freq)) %>%
                dplyr::group_by(subject, v_gene) %>% 
                dplyr::mutate(loc = 1:dplyr::n(), project = strsplit(subject,"_")[[1]][1])
              
              genotypes_fraction_comb <- rbind(genotypes_fraction_j6,genotypes_fraction)
              
              genotypes_fraction_comb$mut <- mut_val
              return(genotypes_fraction_comb)
              })
              genotypes_fraction_comb <- rbindlist(tmp)
              return(genotypes_fraction_comb)
            }, simplify = F)
          }, simplify = F)
        }, simplify = F)
      }, simplify = F)
    }, simplify = F)
  }, simplify = F)
}, simplify = F)

save(data_frac, file = "data_frac_new2.rda")
save(data_frac, file = "relative_usage_haplo/data_frac_new2.rda")
save(data_frac, file = "../data_frac_new2.rda")

mat_list <- sapply(c("IGH","IGK","IGL"),function(chain){
  sapply(c("functional","nonfunctional"), function(functional){
    sapply(c("single","nonsingle"), function(single){
      sapply(c("rm","all"), function(rm_short){
        sapply(as.character(310:322), function(seq_end){
          vgerm <- vgerms[[chain]]
          vgerm <-
            vgerm[!grepl(paste0(c("NL", "OR"), collapse = "|"), names(vgerm))]
          if (functional == "functional") {
            vgerm <- vgerm[functionality[[chain]]]
            vgerm <- vgerm[!is.na(vgerm)]
          }
          
          print(paste(chain, functional, single, rm_short, seq_end))
          print(any(grepl("1-24", names(vgerm))))

          if (single=="single") {
            alleles <-
              data.frame(
                alleles = names(vgerm),
                genes = getGene(names(vgerm), strip_d = F, omit_nl = F),
                stringsAsFactors = F
              ) %>%
              dplyr::group_by(genes) %>% dplyr::filter(row_number() == 1) %>% dplyr::pull(alleles)
            vgerm <- vgerm[alleles]
          }

          vgerm <- gsub("[.]", "-", vgerm)
          tmp_first <- stringi::stri_locate(vgerm, regex = "[A-Z|a-z]")
          if(rm_short=="short"){
            vgerm <- vgerm[-which(tmp_first[,1]!=1)]
          }else{
            for (i in 1:nrow(tmp_first)) {
              vgerm[[i]] <-
                paste0(gsub("[-]", "N", substr(vgerm[[i]], 1, tmp_first[i, 1] - 1)),
                       substr(vgerm[[i]], tmp_first[i, 1], nchar(vgerm[[i]])))
            }
          }

          vgerm <-
            sapply(vgerm, function(x)
              ifelse(nchar(x) != max(nchar(vgerm)), paste0(x, paste0(
                rep("N", (max(nchar(
                  vgerm
                )) - nchar(x))), collapse = ""
              )), x))

          ## cut to 3' end value
          vgerm <-
            sapply(vgerm, function(x)
              substr(x, 1, as.numeric(seq_end))
            )

          dna <- DNAStringSet(vgerm)

          mat <-
            DistanceMatrix(
              dna,
              includeTerminalGaps = FALSE,
              penalizeGapGapMatches = FALSE,
              penalizeGapLetterMatches = T,
              verbose = F
            )

          return(mat)}, simplify = F)
      }, simplify = F)}, simplify = F)}, simplify = F)}, simplify = F)
