options(repos = BiocManager::repositories())
shiny::runApp()
require(dplyr)
require(tidyr)
require(htmltools)
require(bbplot)
require(ggplot2)
require(shiny)
require(shinyWidgets)
require(data.table)
require(alakazam)
require(unikn)
require(plotly)
require(RColorBrewer)
require(unikn)
require(bbplot)
require(plotly)
require(ggplot2)
require(shinythemes)
library(htmlwidgets)
hline <- function(y = 0,
color = "red",
x0 = 0,
x1 = 1) {
list(
type = "line",
x0 = x0,
x1 = x1,
xref = "x",
y0 = y,
y1 = y,
line = list(
color = color,
dash = "dot",
width = 4
)
)
}
load("alleles_dbs.rda")
allele_db <-
alleles_dbs$IGH$functional$nonsingle$all$`318`$complete$`95`
allele_db <-
allele_db %>% dplyr::rowwise() %>% dplyr::mutate(
gene = alakazam::getGene(or_allele, strip_d = F, omit_nl = F),
group = strsplit(gsub(gene, "", new_allele), "[*]")[[1]][1],
gene_group = alakazam::getGene(new_allele, strip_d = F, omit_nl = F)
)
load("functional_groups.rda")
func_groups <-
functional_groups$IGH$functional$nonsingle$all$`318`$complete$`95`
cols <- c("#FAAB18", "#1380A1", "#990000", "#588300")
pal <- cols %>%
unikn::newpal(names = c("orangy", "bluish", "redish", "greeny"))
load("data_frac_new2.rda")
chain <- "IGH"
data <-
setDT(data_frac$IGH$functional$nonsingle$all$`318`$complete$`95`)
data[, v_call := paste0(v_gene, "*", v_allele)]
data$group_plot <- ifelse(is.na(data$j_call), 1, 2)
data %>% filter(v_gene=="IGHV1-3G4")
data %>% filter(v_gene=="IGHV1-3G4", !is.na(j_call))
runApp()
data %>% filter(v_gene=="IGHV1-45G5", !is.na(j_call))
devtools::install_github("Appsilon/shiny.collections")
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("click", "Add one"),
DT::dataTableOutput("cars_data")
))
connection <- shiny.collections::connect()
server <- shinyServer(function(input, output) {
cars <- shiny.collections::collection("cars", connection)
observeEvent(input$click, {
shiny.collections::insert(cars, list(name = "Sample name", value = sample(1:100, 1)))
})
output$cars_data <- DT::renderDataTable(DT::datatable(cars$collection))
})
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("click", "Add one"),
DT::dataTableOutput("cars_data")
))
connection <- shiny.collections::connect()
server <- shinyServer(function(input, output) {
cars <- shiny.collections::collection("cars", connection)
observeEvent(input$click, {
shiny.collections::insert(cars, list(name = "Sample name", value = sample(1:100, 1)))
})
output$cars_data <- DT::renderDataTable(DT::datatable(cars$collection))
})
shinyApp(ui = ui, server = server)
library("googledrive")
drive_find(pattern = "chicken")
drive_find(pattern = "chicken")
